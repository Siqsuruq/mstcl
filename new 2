package require nx
package require tdom
package require fileutil
package require htmlparse

nx::Class create Mapfile {
	:property name:required
	:property path
	
	:method init {} {
		if {[info exists :path] != 0} {
			set :map_file [file join ${:path} ${:name}]
		} else {
			set :path ./
			set :map_file [file join ${:path} ${:name}]
		}
		# puts "FILE: ${:map_file}"
		set :keywds [dict create Map MAP name NAME end END Layer LAYER Class CLASS Style STYLE angle ANGLE shapePath SHAPEPATH data DATA extent EXTENT size SIZE imageType IMAGETYPE imageColor IMAGECOLOR color COLOR status STATUS\
		type TYPE OutputFormat OUTPUTFORMAT mimeType MIMETYPE driver DRIVER extension EXTENSION imageMode IMAGEMODE transparent TRANSPARENT resolution RESOLUTION defResolution DEFRESOLUTION fontSet FONTSET symbolSet SYMBOLSET Symbol SYMBOL\
		units UNITS projection PROJECTION Legend LEGEND keySize KEYSIZE keySpacing KEYSPACING Label LABEL offset OFFSET shadowSize SHADOWSIZE QueryMap QUERYMAP ScaleBar SCALEBAR intervals INTERVALS Web WEB Metadata METADATA\
		outlineColor OUTLINECOLOR template TEMPLATE filled FILLED Points POINTS header HEADER footer FOOTER minScaleDenom MINSCALE maxScaleDenom MAXSCALE imagePath IMAGEPATH imageUrl IMAGEURL Reference REFERENCE image IMAGE\
		minBoxSize MINBOXSIZE maxBoxSize MAXBOXSIZE markerSize MARKERSIZE marker MARKER offsite OFFSITE keyImage KEYIMAGE requires REQUIRES tileIndex TILEINDEX classItem CLASSITEM labelItem LABELITEM expression EXPRESSION group GROUP\
		dump DUMP tolerance TOLERANCE]
		
		# Get file extension, create working copy (temporary file), empty dom in memory, initial stack
		set fext [file extension ${:map_file}]
		dom createDocumentNode :doc
		set :stack ""
		set :tmp_mf [::fileutil::tempfile]

		# File exists and has .map extention
		if {[file exists ${:map_file}] != 0 && $fext eq ".map"} {
			dom createDocumentNode :doc
			set fp [open ${:tmp_mf} a+]
			puts $fp [: -local strip_comments] ;# Remove coments from .map file and write it to temp file tmp_mf
			# puts [read $fp]
			close $fp
			: -local map2xml
		} elseif {[file exists ${:map_file}] != 0 && $fext eq ".xml"} {
			set fp [open ${:map_file} r]
			set fdata [read $fp]
			close $fp

			dom parse $fdata :doc
			puts "File is XML"
		}
	}

###########      USEFULL METHODS     ###########
	:public method "strip_comments" {} {
		set commentChars "#"
		set stripped ""
		set fp [open "${:map_file}" r]
		set file_data [read $fp]
		close $fp
		set data [split $file_data "\n"]
		foreach line $data {
			regsub -all -line "\[$commentChars\].*$" $line "" commentStripped
			regsub "^\[ \t]*$" $commentStripped {} fline
			if {$fline ne ""} {
				append stripped "" $fline\n
			}
		}
		return $stripped
		# puts $stripped
	}

	:public method "print_stack" {args} {
		puts "CURRENT STACK: ${:stack}"
	}
	

########### SAVE AND EXPORT RELATED ###########
	:public method "as" {{type xml}} {
		if {$type eq "xml"} {
			return [${:doc} asXML -xmlDeclaration 1 -encString UTF-8]
		} elseif {$type eq "html"} {
			return [${:doc} asHTML]
		} elseif {$type eq "text"} {
			return [${:doc} asText]
		} elseif {$type eq "json"} {
			return [${:doc} asJSON -indent 1]
		}
	}
	
	:public method "save" {ftype fname} {
		if {$ftype eq "xml"} {
			puts "Saving file to: [file join ${:path} ${:name}]"
		} elseif {$ftype eq "map"} {
			puts "Saving file to: [file join ${:path} ${:name}]"
		}
	}

#############     GET   #############
	:public method "list_layers" {args} {
		if {[${:doc} hasChildNodes]} {
			set layers_dict [dict create]
			set count 1
			set layers [${:doc} getElementsByTagName Layer]
			foreach lay $layers {
				set line [dict create]
				set attrs [$lay attributeNames]
				foreach attr $attrs {
					dict append line $attr [$lay getAttribute $attr]
				}
				dict append layers_dict Layer$count $line
				incr count
			}
			return $layers_dict
		} else {
			: -local map2xml
			: -local list_layers
		}
	}


	:private method node_dict {node} {
		set attrs [$node attributes]
		if {$attrs ne ""} {
			set attr_dict [dict create]
			foreach attr $attrs {
				dict append attr_dict $attr [$node getAttribute $attr] 
			}
			# dict append ::res [$node nodeName] $attr_dict
			puts "[$node nodeName] $attr_dict"
		}
		
		if {[$node hasChildNodes]} {
			foreach parent [$node childNodes] {
				a $parent
			}
		} else {
			if {[$node nodeType] eq "TEXT_NODE"} {
				# dict append ::res [[$node parentNode] nodeName] [$node nodeValue]
				puts "[[$node parentNode] nodeName] [$node nodeValue]"
			}
		}
	}




	:public method get {what} {
		set tag [lsearch -inline -nocase [dict keys ${:keywds}] $what]
		puts "TAG: $tag"
		puts "-------"
		
		set result [dict create]
		if {$tag ne ""} {
			set nodes [${:doc} getElementsByTagName $tag]
			foreach node $nodes {
				puts [: -local node_dict $node]
			}
		}
	}
	
#############     PARSE MAP2XML   #############
	:public method "map2xml" {} {
		if {[file exists ${:tmp_mf}] != 0} {
			set fp [open "${:tmp_mf}" r]
			set file_data [read $fp]
			close $fp
			set data [split $file_data "\n"]
			foreach line $data {
				if {$line ne ""} {
					puts "PARSING LINE: $line"
					: -local line $line
				}
			}
		} else {return "File doesnt exists."}
	}

	:public method "line" {line} {
		set keywords [dict values ${:keywds}]
		set kw ""
		foreach key $keywords {
			if {[lsearch -inline $line $key*] != ""} {
				set kw $key
			}
		}
			if {$kw != ""} {
				set xml_tag [dict keys [dict filter ${:keywds} value $kw]]
				if {$kw eq "MAP"} {
					set node [${:doc} createElement Map]
					${:doc} appendChild $node
					set :stack [lappend :stack $node]
				} elseif {$kw eq "NAME" || $kw eq "STATUS" || $kw eq "TYPE"} {
					: -local attr $xml_tag [lindex $line 1]
				} elseif {$kw eq "LAYER" || $kw eq "CLASS" || $kw eq "OUTPUTFORMAT" || $kw eq "PROJECTION" || $kw eq "LEGEND" || $kw eq "LABEL" || $kw eq "QUERYMAP" || $kw eq "SCALEBAR" || $kw eq "WEB" || $kw eq "METADATA" || $kw eq "POINTS" || $kw eq "REFERENCE"} { ; #NODES WITH END
					set work_node [lindex ${:stack} end]
					set node [${:doc} createElement $xml_tag]
					$work_node appendChild $node
					set :stack [lappend :stack $node]
				} elseif {$kw eq "STYLE" || $kw eq "SYMBOL"} {
					set data [lindex $line 1]
					if {$data eq ""} {
						set work_node [lindex ${:stack} end]
						set node [${:doc} createElement $xml_tag]
						$work_node appendChild $node
						set :stack [lappend :stack $node]
					} else {
						: -local add_key_val $xml_tag $data
					}
				} elseif {$kw eq "DATA" || $kw eq "EXTENT" || $kw eq "ANGLE" || $kw eq "IMAGETYPE" || $kw eq "SHAPEPATH"} {
					: -local add_key_val $xml_tag [lrange $line 1 end]
				} elseif {$kw eq "SIZE" || $kw eq "KEYSIZE" || $kw eq "KEYSPACING" || $kw eq "OFFSET" || $kw eq "SHADOWSIZE" || $kw eq "INTERVALS"} { ;# VALUES WITH 2 ATTR
					set vals [lrange $line 1 end]
					if {[llength $vals] == 2} {
						: -local add_key_attr $xml_tag [dict create x [lindex $vals 0] y [lindex $vals 1]]
					} else {
						: -local add_key_val $xml_tag [lrange $line 1 end]
					}
				} elseif {$kw eq "IMAGECOLOR" || $kw eq "COLOR" || $kw eq "OUTLINECOLOR" || $kw eq "OFFSITE"} { ;# COLOR RELATED VALUES WITH # ATTR
					set vals [lrange $line 1 end]
					: -local add_key_attr $xml_tag [dict create red [lindex $vals 0] green [lindex $vals 1] blue [lindex $vals 2]]
				} elseif {$kw eq "END"} {
					set :stack [lreplace ${:stack} end end]
				} else {
					: -local add_key_val $xml_tag [lindex [lrange $line 1 end] 0]
				}
			} else {
				set work_node [lindex ${:stack} end]
				if {[$work_node nodeName] eq "Projection"} {
					set data "\n\t[lindex $line 0]\n"
					set tnode [${:doc} createTextNode $data]
					$work_node appendChild $tnode
				} elseif {[$work_node nodeName] eq "Metadata"} {
					set attr [lindex $line 0]
					set name [lindex $line 1]
					: -local add_key_val_attr item $name [dict create name $attr]
				} elseif {[$work_node nodeName] eq "Points"} {
					set vals [lrange $line 0 end]
					: -local add_key_attr point [dict create x [lindex $vals 0] y [lindex $vals 1]]
				}
			}
	}
	
	
	
	:private method "add_key_val" {key value} {
		set work_node [lindex ${:stack} end]
		set node [${:doc} createElement $key]
		$node appendChild [${:doc} createTextNode $value]
		$work_node appendChild $node
	}
	
	:private method "add_key_attr" {key attrd} {
		set work_node [lindex ${:stack} end]
		set node [${:doc} createElement $key]
		foreach attr [dict keys $attrd] attr_val [dict values $attrd] {
			$node setAttribute $attr $attr_val
		}
		$work_node appendChild $node
	}
	
	
	:private method "add_key_val_attr" {key value attrd} {
		set work_node [lindex ${:stack} end]
		set node [${:doc} createElement $key]
		$node appendChild [${:doc} createTextNode $value]
		foreach attr [dict keys $attrd] attr_val [dict values $attrd] {
			$node setAttribute $attr $attr_val
		}
		$work_node appendChild $node
	
	}
	
	:private method "attr" {attr val} {
		set work_node [lindex ${:stack} end]
		$work_node setAttribute $attr "$val"
	}
	


	:public method xml2map {} {
	
	}
	



###########################################
	:public method "parse_xml" {} {
		set root [${:doc} documentElement]
		set :xml_stack [list]
		set :line ""
		
		set tmpxml [open ${:tmp_xml} a+]
		# : -local explore $root $tmpxml
		: -local expl [${:root} asList]
		close $tmpxml

		set fp [open ${:tmp_xml} r]
		set file_data [read $fp]

		close $fp
		puts $file_data
		
	}
	
	:private method "expl" {a} {
		foreach e $ {
			puts $e
		}
	}
	
	
	:private method "explore" {parent tmpxml} {
		set top_tags [list Map Layer Class Style]
		set type [$parent nodeType]
		set name [$parent nodeName]

		puts "$parent is a $type node named $name"
		
		
		if {$type eq "ELEMENT_NODE"} {
			set a [lsearch -inline $top_tags $name]
			if {$a ne ""} {
				set ${:line} [lappend :line [dict get ${:keywds} $name]]
				set :xml_stack [lappend :xml_stack $parent]
				puts "TAG $name NODE $parent"
			}
		} elseif {$type eq "TEXT_NODE"} {
			set ${:line} [lappend :line "[$parent nodeValue]\n"]
		}
		
		# if {$type != "ELEMENT_NODE"} then return

		if {[llength [$parent attributes]]} {
			puts "attributes: [join [$parent attributes] ", "]"
		}
		
		puts $tmpxml ${:line}
		foreach child [$parent childNodes] {
			: -local explore $child $tmpxml
		}
	}

}

Mapfile create map -name ./test_data/itasca.map